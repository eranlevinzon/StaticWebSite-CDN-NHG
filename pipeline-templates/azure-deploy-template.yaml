parameters:
- name: environmentName
  type: string
- name: azureSubscription
  type: string
- name: resourceGroupName
  type: string
- name: bicepTemplatePath
  type: string
- name: parameterFilePath
  type: string
- name: variableGroup 
  type: string

jobs:
- job: DeployAndUpload
  displayName: 'Deploy and Upload Artifacts to ${{ parameters.environmentName }}'  
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    - group: ${{ parameters.variableGroup }}  
  steps:
  - checkout: self
  - task: AzureCLI@2
    displayName: 'Deploy Bicep Template'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo ${{ parameters.resourceGroupName }}
        echo ${{ parameters.bicepTemplatePath }}
        echo ${{ parameters.parameterFilePath }}
        outputs=$(az deployment group create --resource-group ${{ parameters.resourceGroupName }} --template-file ${{ parameters.bicepTemplatePath }} --parameters ${{ parameters.parameterFilePath }} --query properties.outputs --output json)
        storageAccountName=$(echo "$outputs" | jq -r '.storageAccountName.value')
        cdnEndpointHostName=$(echo "$outputs" | jq -r '.cdnEndpointHostName.value')
        cdnOriginHostHeader=$(echo "$outputs" | jq -r '.cdnOriginHostHeader.value')
        echo "##vso[task.setvariable variable=storageaccount]$storageAccountName"
        echo "##vso[task.setvariable variable=cdnEndpointname]$cdnEndpointHostName"
        echo "##vso[task.setvariable variable=cdnprofile]$cdnOriginHostHeader"
  - task: AzureCLI@2
    displayName: 'Upload Static Files to Storage'
    inputs:
      azureSubscription:  ${{ parameters.azureSubscription }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo $storageaccount
        az storage blob upload-batch -s $(Build.SourcesDirectory)/src -d \$web --account-name $(storageaccount)
      workingDirectory: '$(Build.SourcesDirectory)'
  - task: PowerShell@2
    displayName: "Run Pester tests"
    inputs:
      targetType: "inline"
      script: |       
        Write-Host '$(TenantId)'

        # Login to Azure CLI using the service principal
        az login --service-principal -u '$(azureServicePrincipalClientId)' -p '$(azureServicePrincipalClientSecret)' --tenant '$(TenantId)'
        $Container = New-PesterContainer -Path './tests/verify-website.tests.ps1' -Data @{ endpointName = "$(cdnEndpointname)" ; StorageAccountName = "$(storageaccount)"; cdnProfileName= "$(cdnProfileName)" ; resourceGroupName = "${{ parameters.resourceGroupName }}" }
        Invoke-Pester -Container $container
      ignoreLASTEXITCODE: true
